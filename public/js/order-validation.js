/**\n * Order Validation Client-Side Script\n * Handles real-time validation for minimum order amounts\n */\n\nclass OrderValidator {\n    constructor(settings) {\n        this.settings = settings;\n        this.cartTotal = 0;\n        this.init();\n    }\n    \n    init() {\n        this.updateCartTotal();\n        this.bindEvents();\n        this.checkMinimumOrderAmount();\n    }\n    \n    bindEvents() {\n        // Listen for cart updates\n        document.addEventListener('cart:updated', (e) => {\n            this.cartTotal = e.detail.total || 0;\n            this.checkMinimumOrderAmount();\n        });\n        \n        // Listen for quantity changes\n        document.querySelectorAll('.quantity-input, .quantity-selector').forEach(input => {\n            input.addEventListener('change', () => {\n                setTimeout(() => this.updateCartTotal(), 100);\n            });\n        });\n        \n        // Listen for product additions\n        document.addEventListener('product:added', () => {\n            setTimeout(() => this.updateCartTotal(), 100);\n        });\n    }\n    \n    updateCartTotal() {\n        // Try to get cart total from various sources\n        const totalElement = document.querySelector('.cart-total, #cart-total, [data-cart-total]');\n        if (totalElement) {\n            const totalText = totalElement.textContent || totalElement.innerText;\n            const total = parseFloat(totalText.replace(/[^\\d.]/g, '')) || 0;\n            this.cartTotal = total;\n        }\n        \n        this.checkMinimumOrderAmount();\n    }\n    \n    checkMinimumOrderAmount() {\n        if (!this.settings.min_order_validation_enabled) {\n            this.hideMinOrderWarning();\n            return;\n        }\n        \n        const minAmount = parseFloat(this.settings.min_order_amount);\n        const currentAmount = this.cartTotal;\n        \n        if (currentAmount < minAmount) {\n            this.showMinOrderWarning(currentAmount, minAmount);\n            this.disableCheckoutButton();\n        } else {\n            this.hideMinOrderWarning();\n            this.enableCheckoutButton();\n        }\n    }\n    \n    showMinOrderWarning(currentAmount, minAmount) {\n        const shortfall = minAmount - currentAmount;\n        \n        // Remove existing warning\n        this.hideMinOrderWarning();\n        \n        // Create warning element\n        const warningElement = document.createElement('div');\n        warningElement.id = 'min-order-warning';\n        warningElement.className = 'alert alert-warning min-order-warning';\n        warningElement.innerHTML = `\n            <i class=\"fas fa-exclamation-triangle\"></i>\n            <strong>Minimum Order Required</strong><br>\n            ${this.settings.min_order_message}<br>\n            <small>Add â‚¹${shortfall.toFixed(2)} more to proceed with checkout.</small>\n        `;\n        \n        // Insert warning before checkout button or at top of cart\n        const checkoutButton = document.querySelector('.checkout-btn, .btn-checkout, #checkout-button');\n        const cartContainer = document.querySelector('.cart-container, .cart-summary, #cart-summary');\n        \n        if (checkoutButton && checkoutButton.parentNode) {\n            checkoutButton.parentNode.insertBefore(warningElement, checkoutButton);\n        } else if (cartContainer) {\n            cartContainer.insertBefore(warningElement, cartContainer.firstChild);\n        } else {\n            // Fallback: add to body\n            document.body.appendChild(warningElement);\n        }\n        \n        // Add animation\n        setTimeout(() => {\n            warningElement.classList.add('show');\n        }, 10);\n    }\n    \n    hideMinOrderWarning() {\n        const existing = document.getElementById('min-order-warning');\n        if (existing) {\n            existing.remove();\n        }\n    }\n    \n    disableCheckoutButton() {\n        const checkoutButtons = document.querySelectorAll('.checkout-btn, .btn-checkout, #checkout-button');\n        checkoutButtons.forEach(button => {\n            button.disabled = true;\n            button.classList.add('btn-disabled');\n            if (!button.dataset.originalText) {\n                button.dataset.originalText = button.textContent;\n            }\n            button.innerHTML = '<i class=\"fas fa-lock\"></i> Minimum Order Required';\n        });\n    }\n    \n    enableCheckoutButton() {\n        const checkoutButtons = document.querySelectorAll('.checkout-btn, .btn-checkout, #checkout-button');\n        checkoutButtons.forEach(button => {\n            button.disabled = false;\n            button.classList.remove('btn-disabled');\n            if (button.dataset.originalText) {\n                button.textContent = button.dataset.originalText;\n            }\n        });\n    }\n    \n    // Public method to manually trigger validation\n    validate() {\n        this.updateCartTotal();\n        return this.cartTotal >= parseFloat(this.settings.min_order_amount);\n    }\n    \n    // Get current validation status\n    getValidationStatus() {\n        const minAmount = parseFloat(this.settings.min_order_amount);\n        const isValid = !this.settings.min_order_validation_enabled || this.cartTotal >= minAmount;\n        \n        return {\n            valid: isValid,\n            currentAmount: this.cartTotal,\n            minAmount: minAmount,\n            shortfall: isValid ? 0 : minAmount - this.cartTotal,\n            message: isValid ? '' : this.settings.min_order_message\n        };\n    }\n}\n\n// Auto-initialize if settings are available\nif (typeof window.orderValidationSettings !== 'undefined') {\n    window.orderValidator = new OrderValidator(window.orderValidationSettings);\n}\n\n// Export for manual initialization\nwindow.OrderValidator = OrderValidator;"