<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n// Bootstrap Laravel\n$app = require_once __DIR__ . '/bootstrap/app.php';\n$app->make('Illuminate\\Contracts\\Console\\Kernel')->bootstrap();\n\nuse App\\Models\\Notification;\nuse App\\Models\\Order;\nuse App\\Models\\Product;\nuse App\\Models\\Customer;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Pagination\\Paginator;\n\necho \"=== PAGINATION UI FIXES VERIFICATION ===\".\"\\n\";\necho \"Time: \" . date('Y-m-d H:i:s') . \"\\n\\n\";\n\ntry {\n    echo \"🔍 Step 1: Checking Pagination Configuration...\\n\";\n    echo \"===========================================\\n\";\n    \n    // Check if pagination views exist\n    $paginationViews = [\n        'pagination.default',\n        'pagination.simple-default',\n        'pagination.bootstrap-5',\n        'components.pagination'\n    ];\n    \n    foreach ($paginationViews as $view) {\n        if (View::exists($view)) {\n            echo \"✅ View '{$view}' exists\\n\";\n        } else {\n            echo \"❌ View '{$view}' missing\\n\";\n        }\n    }\n    \n    echo \"\\n🔍 Step 2: Testing Pagination Data...\\n\";\n    echo \"==================================\\n\";\n    \n    // Test various models with pagination\n    $models = [\n        'Notifications' => Notification::class,\n        'Orders' => Order::class,\n        'Products' => Product::class,\n        'Customers' => Customer::class,\n    ];\n    \n    foreach ($models as $name => $model) {\n        try {\n            $count = $model::count();\n            echo \"✅ {$name}: {$count} records\\n\";\n            \n            if ($count > 0) {\n                $paginated = $model::paginate(5);\n                echo \"   - Page {$paginated->currentPage()} of {$paginated->lastPage()}\\n\";\n                echo \"   - Showing {$paginated->firstItem()}-{$paginated->lastItem()} of {$paginated->total()}\\n\";\n                \n                if ($paginated->hasPages()) {\n                    echo \"   - Has pagination: Yes\\n\";\n                } else {\n                    echo \"   - Has pagination: No\\n\";\n                }\n            }\n        } catch (\\Exception $e) {\n            echo \"❌ {$name}: Error - {$e->getMessage()}\\n\";\n        }\n    }\n    \n    echo \"\\n🔍 Step 3: Testing Pagination View Rendering...\\n\";\n    echo \"==============================================\\n\";\n    \n    // Test pagination view rendering\n    $testPagination = Notification::paginate(5);\n    \n    if ($testPagination->hasPages()) {\n        echo \"✅ Pagination has pages to display\\n\";\n        echo \"   - Current page: {$testPagination->currentPage()}\\n\";\n        echo \"   - Last page: {$testPagination->lastPage()}\\n\";\n        echo \"   - Items per page: {$testPagination->perPage()}\\n\";\n        echo \"   - Total items: {$testPagination->total()}\\n\";\n        echo \"   - Has more pages: \" . ($testPagination->hasMorePages() ? 'Yes' : 'No') . \"\\n\";\n        \n        // Test if we can get the links\n        try {\n            $links = $testPagination->links();\n            echo \"✅ Pagination links generated successfully\\n\";\n        } catch (\\Exception $e) {\n            echo \"❌ Pagination links generation failed: {$e->getMessage()}\\n\";\n        }\n    } else {\n        echo \"ℹ️  Test pagination has no pages (less than 5 records)\\n\";\n    }\n    \n    echo \"\\n🔍 Step 4: CSS and Assets Check...\\n\";\n    echo \"=================================\\n\";\n    \n    // Check if pagination CSS file exists\n    $cssFile = __DIR__ . '/public/css/pagination.css';\n    if (file_exists($cssFile)) {\n        $cssSize = filesize($cssFile);\n        echo \"✅ Pagination CSS file exists ({$cssSize} bytes)\\n\";\n        \n        // Check if CSS contains key selectors\n        $cssContent = file_get_contents($cssFile);\n        $cssSelectors = ['.pagination', '.pagination-container', '.admin-pagination', '.page-link'];\n        \n        foreach ($cssSelectors as $selector) {\n            if (strpos($cssContent, $selector) !== false) {\n                echo \"   ✅ CSS contains '{$selector}' selector\\n\";\n            } else {\n                echo \"   ❌ CSS missing '{$selector}' selector\\n\";\n            }\n        }\n    } else {\n        echo \"❌ Pagination CSS file missing\\n\";\n    }\n    \n    echo \"\\n🔍 Step 5: Route and Controller Check...\\n\";\n    echo \"======================================\\n\";\n    \n    // Check if pagination routes work\n    $paginationRoutes = [\n        'admin.notifications.index',\n        'admin.orders.index',\n        'admin.products.index',\n        'admin.customers.index'\n    ];\n    \n    foreach ($paginationRoutes as $route) {\n        if (\\Illuminate\\Support\\Facades\\Route::has($route)) {\n            echo \"✅ Route '{$route}' exists\\n\";\n        } else {\n            echo \"❌ Route '{$route}' missing\\n\";\n        }\n    }\n    \n    echo \"\\n🔍 Step 6: Bootstrap 5 Compatibility Check...\\n\";\n    echo \"============================================\\n\";\n    \n    // Check if Bootstrap 5 classes are used in pagination views\n    $bootstrap5Classes = ['page-item', 'page-link', 'pagination', 'fw-semibold', 'text-primary'];\n    \n    $paginationDefaultPath = __DIR__ . '/resources/views/pagination/bootstrap-5.blade.php';\n    if (file_exists($paginationDefaultPath)) {\n        $paginationContent = file_get_contents($paginationDefaultPath);\n        \n        foreach ($bootstrap5Classes as $class) {\n            if (strpos($paginationContent, $class) !== false) {\n                echo \"✅ Bootstrap 5 class '{$class}' found in pagination view\\n\";\n            } else {\n                echo \"❌ Bootstrap 5 class '{$class}' missing in pagination view\\n\";\n            }\n        }\n    } else {\n        echo \"❌ Bootstrap 5 pagination view file missing\\n\";\n    }\n    \n    echo \"\\n📊 VERIFICATION SUMMARY\\n\";\n    echo \"======================\\n\";\n    \n    $checks = [\n        'Pagination views exist' => View::exists('pagination.bootstrap-5'),\n        'CSS file exists' => file_exists($cssFile),\n        'Test data available' => Notification::count() > 0,\n        'Routes available' => \\Illuminate\\Support\\Facades\\Route::has('admin.notifications.index'),\n        'Bootstrap 5 compatible' => file_exists($paginationDefaultPath)\n    ];\n    \n    $passedChecks = 0;\n    $totalChecks = count($checks);\n    \n    foreach ($checks as $check => $passed) {\n        if ($passed) {\n            echo \"✅ {$check}\\n\";\n            $passedChecks++;\n        } else {\n            echo \"❌ {$check}\\n\";\n        }\n    }\n    \n    echo \"\\nScore: {$passedChecks}/{$totalChecks} checks passed\\n\";\n    \n    if ($passedChecks === $totalChecks) {\n        echo \"\\n🎉 ALL CHECKS PASSED! Pagination UI fixes are working correctly.\\n\";\n    } else {\n        echo \"\\n⚠️  Some checks failed. Please review the issues above.\\n\";\n    }\n    \n    echo \"\\n🚀 TESTING RECOMMENDATIONS\\n\";\n    echo \"==========================\\n\";\n    echo \"1. Test pagination on these pages:\\n\";\n    echo \"   - /admin/notifications\\n\";\n    echo \"   - /admin/orders\\n\";\n    echo \"   - /admin/products\\n\";\n    echo \"   - /admin/customers\\n\";\n    echo \"\\n\";\n    echo \"2. Test pagination features:\\n\";\n    echo \"   - Page navigation (Previous/Next)\\n\";\n    echo \"   - First/Last page buttons\\n\";\n    echo \"   - Current page highlighting\\n\";\n    echo \"   - Results count display\\n\";\n    echo \"   - Responsive design on mobile\\n\";\n    echo \"\\n\";\n    echo \"3. Test with different data volumes:\\n\";\n    echo \"   - Less than 1 page of data\\n\";\n    echo \"   - Exactly 1 page of data\\n\";\n    echo \"   - Multiple pages of data\\n\";\n    echo \"\\n\";\n    echo \"4. Test styling:\\n\";\n    echo \"   - Hover effects\\n\";\n    echo \"   - Active page styling\\n\";\n    echo \"   - Disabled button styling\\n\";\n    echo \"   - Responsive layout\\n\";\n    echo \"\\n\";\n    \n    echo \"=== VERIFICATION COMPLETED ===\\n\";\n    \n} catch (\\Exception $e) {\n    echo \"❌ VERIFICATION ERROR: \" . $e->getMessage() . \"\\n\";\n    echo \"File: \" . $e->getFile() . \"\\n\";\n    echo \"Line: \" . $e->getLine() . \"\\n\";\n    echo \"\\nPlease fix the error and run verification again.\\n\";\n}"