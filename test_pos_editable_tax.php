<?php\n\n/**\n * Test script for POS editable tax functionality\n * Run this script to verify that the editable tax system is working correctly\n */\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse App\\Models\\PosSale;\nuse Illuminate\\Support\\Facades\\Schema;\nuse App\\Models\\SuperAdmin\\Company;\n\nclass PosEditableTaxTest\n{\n    private $results = [];\n    \n    public function __construct()\n    {\n        echo \"\\n\" . str_repeat('=', 60) . \"\\n\";\n        echo \"POS EDITABLE TAX FUNCTIONALITY TEST SUITE\\n\";\n        echo str_repeat('=', 60) . \"\\n\\n\";\n    }\n    \n    public function runAllTests()\n    {\n        try {\n            $this->testDatabaseSchema();\n            $this->testModelFields();\n            $this->testPosSaleCreation();\n            $this->testCustomTaxCalculations();\n            $this->printResults();\n        } catch (Exception $e) {\n            echo \"ERROR: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n    \n    private function testDatabaseSchema()\n    {\n        echo \"1. Testing database schema changes...\\n\";\n        \n        $requiredColumns = [\n            'custom_tax_enabled',\n            'custom_tax_amount',\n            'tax_notes',\n            'cgst_amount',\n            'sgst_amount'\n        ];\n        \n        foreach ($requiredColumns as $column) {\n            if (Schema::hasColumn('pos_sales', $column)) {\n                $this->results[] = [\"✓\", \"Column '{$column}'\", \"Exists\"];\n            } else {\n                $this->results[] = [\"✗\", \"Column '{$column}'\", \"Missing\"];\n            }\n        }\n        \n        echo \"\\n\";\n    }\n    \n    private function testModelFields()\n    {\n        echo \"2. Testing PosSale model fields...\\n\";\n        \n        $model = new PosSale();\n        $fillableFields = $model->getFillable();\n        \n        $requiredFillable = [\n            'custom_tax_enabled',\n            'custom_tax_amount',\n            'tax_notes'\n        ];\n        \n        foreach ($requiredFillable as $field) {\n            if (in_array($field, $fillableFields)) {\n                $this->results[] = [\"✓\", \"Fillable field '{$field}'\", \"Available\"];\n            } else {\n                $this->results[] = [\"✗\", \"Fillable field '{$field}'\", \"Missing\"];\n            }\n        }\n        \n        // Test casts\n        $casts = $model->getCasts();\n        if (isset($casts['custom_tax_enabled']) && $casts['custom_tax_enabled'] === 'boolean') {\n            $this->results[] = [\"✓\", \"Boolean cast for custom_tax_enabled\", \"Correct\"];\n        } else {\n            $this->results[] = [\"✗\", \"Boolean cast for custom_tax_enabled\", \"Missing\"];\n        }\n        \n        echo \"\\n\";\n    }\n    \n    private function testPosSaleCreation()\n    {\n        echo \"3. Testing POS sale creation with custom tax...\\n\";\n        \n        try {\n            // Test data\n            $testData = [\n                'invoice_number' => 'TEST' . time(),\n                'sale_date' => now()->toDateString(),\n                'subtotal' => 1000.00,\n                'tax_amount' => 180.00,\n                'custom_tax_enabled' => true,\n                'custom_tax_amount' => 180.00,\n                'cgst_amount' => 90.00,\n                'sgst_amount' => 90.00,\n                'discount_amount' => 0,\n                'total_amount' => 1180.00,\n                'paid_amount' => 1180.00,\n                'change_amount' => 0,\n                'payment_method' => 'cash',\n                'status' => 'completed',\n                'tax_notes' => 'Custom tax for testing',\n                'cashier_id' => 1\n            ];\n            \n            // Get first company ID if available\n            $company = Company::first();\n            if ($company) {\n                $testData['company_id'] = $company->id;\n            }\n            \n            $sale = PosSale::create($testData);\n            \n            if ($sale->exists) {\n                $this->results[] = [\"✓\", \"POS Sale creation\", \"Success\"];\n                $this->results[] = [\"✓\", \"Custom tax enabled\", $sale->custom_tax_enabled ? 'True' : 'False'];\n                $this->results[] = [\"✓\", \"Custom tax amount\", \"₹\" . $sale->custom_tax_amount];\n                $this->results[] = [\"✓\", \"Tax notes\", $sale->tax_notes ? 'Saved' : 'Empty'];\n                \n                // Clean up test record\n                $sale->delete();\n                $this->results[] = [\"✓\", \"Test cleanup\", \"Complete\"];\n            } else {\n                $this->results[] = [\"✗\", \"POS Sale creation\", \"Failed\"];\n            }\n            \n        } catch (Exception $e) {\n            $this->results[] = [\"✗\", \"POS Sale creation\", $e->getMessage()];\n        }\n        \n        echo \"\\n\";\n    }\n    \n    private function testCustomTaxCalculations()\n    {\n        echo \"4. Testing tax calculation scenarios...\\n\";\n        \n        $scenarios = [\n            [\n                'name' => 'Auto tax calculation',\n                'subtotal' => 1000,\n                'tax_percentage' => 18,\n                'custom_enabled' => false,\n                'expected_tax' => 180\n            ],\n            [\n                'name' => 'Custom tax override',\n                'subtotal' => 1000,\n                'tax_percentage' => 18,\n                'custom_enabled' => true,\n                'custom_amount' => 250,\n                'expected_tax' => 250\n            ],\n            [\n                'name' => 'Zero custom tax',\n                'subtotal' => 1000,\n                'tax_percentage' => 18,\n                'custom_enabled' => true,\n                'custom_amount' => 0,\n                'expected_tax' => 0\n            ]\n        ];\n        \n        foreach ($scenarios as $scenario) {\n            $calculatedTax = $scenario['custom_enabled'] \n                ? ($scenario['custom_amount'] ?? 0)\n                : ($scenario['subtotal'] * $scenario['tax_percentage'] / 100);\n                \n            if ($calculatedTax == $scenario['expected_tax']) {\n                $this->results[] = [\"✓\", $scenario['name'], \"₹{$calculatedTax}\"];\n            } else {\n                $this->results[] = [\"✗\", $scenario['name'], \"Expected ₹{$scenario['expected_tax']}, got ₹{$calculatedTax}\"];\n            }\n        }\n        \n        echo \"\\n\";\n    }\n    \n    private function printResults()\n    {\n        echo str_repeat('=', 60) . \"\\n\";\n        echo \"TEST RESULTS\\n\";\n        echo str_repeat('=', 60) . \"\\n\\n\";\n        \n        $passed = 0;\n        $failed = 0;\n        \n        foreach ($this->results as $result) {\n            $status = $result[0];\n            $test = str_pad($result[1], 35);\n            $message = $result[2];\n            \n            echo \"{$status} {$test} : {$message}\\n\";\n            \n            if ($status === '✓') {\n                $passed++;\n            } else {\n                $failed++;\n            }\n        }\n        \n        echo \"\\n\" . str_repeat('-', 60) . \"\\n\";\n        echo \"SUMMARY: {$passed} passed, {$failed} failed\\n\";\n        \n        if ($failed === 0) {\n            echo \"\\n🎉 ALL TESTS PASSED! POS editable tax is working correctly.\\n\";\n            echo \"\\n📋 FEATURES CONFIRMED:\\n\";\n            echo \"   • Database schema updated successfully\\n\";\n            echo \"   • Model fields configured properly\\n\";\n            echo \"   • Custom tax creation working\\n\";\n            echo \"   • Tax calculation logic correct\\n\";\n            echo \"\\n🚀 READY TO USE:\\n\";\n            echo \"   Go to Admin Panel > Point of Sale\\n\";\n            echo \"   Toggle the 'Manual' switch in tax section\\n\";\n            echo \"   Enter custom tax amounts as needed\\n\";\n        } else {\n            echo \"\\n⚠️  Some tests failed. Please check the configuration.\\n\";\n            echo \"\\n🔧 TROUBLESHOOTING:\\n\";\n            echo \"   1. Run: activate-pos-editable-tax.bat\\n\";\n            echo \"   2. Check database migration status\\n\";\n            echo \"   3. Verify model configuration\\n\";\n        }\n        \n        echo \"\\n\" . str_repeat('=', 60) . \"\\n\";\n    }\n}\n\n// Run tests if this file is executed directly\nif (basename(__FILE__) === basename($_SERVER['SCRIPT_FILENAME'])) {\n    $tester = new PosEditableTaxTest();\n    $tester->runAllTests();\n}\n"