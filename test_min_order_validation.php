<?php\n\n/**\n * Test script for minimum order validation functionality\n * Run this script to verify that the order validation system is working correctly\n */\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse App\\Models\\AppSetting;\nuse App\\Services\\DeliveryService;\nuse App\\Services\\OrderValidationService;\nuse App\\Models\\SuperAdmin\\Company;\n\nclass MinOrderValidationTest\n{\n    private $results = [];\n    private $companyId;\n    \n    public function __construct()\n    {\n        echo \"\\n\" . str_repeat('=', 60) . \"\\n\";\n        echo \"MINIMUM ORDER VALIDATION TEST SUITE\\n\";\n        echo str_repeat('=', 60) . \"\\n\\n\";\n    }\n    \n    public function runAllTests()\n    {\n        try {\n            $this->testSettingsExist();\n            $this->testValidationService();\n            $this->testOrderValidationService();\n            $this->testDifferentAmounts();\n            $this->testAdminControls();\n            $this->printResults();\n        } catch (Exception $e) {\n            echo \"ERROR: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n    \n    private function testSettingsExist()\n    {\n        echo \"1. Testing if minimum order validation settings exist...\\n\";\n        \n        // Get first active company for testing\n        $company = Company::where('status', 'active')->first();\n        if ($company) {\n            $this->companyId = $company->id;\n            echo \"   Using company: {$company->name} (ID: {$company->id})\\n\";\n        }\n        \n        $settings = [\n            'min_order_validation_enabled',\n            'min_order_amount',\n            'min_order_message'\n        ];\n        \n        foreach ($settings as $setting) {\n            $value = AppSetting::get($setting);\n            if ($value !== null) {\n                $this->results[] = [\"✓\", \"Setting '{$setting}' exists\", $value];\n            } else {\n                $this->results[] = [\"✗\", \"Setting '{$setting}' missing\", 'NULL'];\n            }\n        }\n        \n        echo \"\\n\";\n    }\n    \n    private function testValidationService()\n    {\n        echo \"2. Testing DeliveryService validation methods...\\n\";\n        \n        // Test different amounts\n        $testAmounts = [500, 999.99, 1000, 1500, 0];\n        \n        foreach ($testAmounts as $amount) {\n            $result = DeliveryService::validateMinimumOrderAmount($amount);\n            \n            $status = $result['valid'] ? '✓' : '✗';\n            $message = $result['valid'] ? 'Valid' : $result['message'];\n            \n            $this->results[] = [$status, \"Amount ₹{$amount}\", $message];\n        }\n        \n        // Test settings retrieval\n        $settings = DeliveryService::getMinOrderValidationSettings();\n        if (is_array($settings) && isset($settings['min_order_validation_enabled'])) {\n            $this->results[] = [\"✓\", \"Settings retrieval\", \"Working\"];\n        } else {\n            $this->results[] = [\"✗\", \"Settings retrieval\", \"Failed\"];\n        }\n        \n        echo \"\\n\";\n    }\n    \n    private function testOrderValidationService()\n    {\n        echo \"3. Testing OrderValidationService...\\n\";\n        \n        // Test order amount validation\n        $testCases = [\n            ['amount' => 500, 'type' => 'online'],\n            ['amount' => 1200, 'type' => 'online'],\n            ['amount' => 500, 'type' => 'pos'], // POS should not be validated\n        ];\n        \n        foreach ($testCases as $case) {\n            $result = OrderValidationService::validateOrderAmount($case['amount'], $case['type']);\n            \n            $status = $result['valid'] ? '✓' : '✗';\n            $description = \"{$case['type']} order ₹{$case['amount']}\";\n            $message = $result['valid'] ? 'Valid' : 'Below minimum';\n            \n            $this->results[] = [$status, $description, $message];\n        }\n        \n        // Test validation messages\n        $messages = OrderValidationService::getValidationMessages();\n        if (is_array($messages) && isset($messages['min_order_message'])) {\n            $this->results[] = [\"✓\", \"Validation messages\", \"Available\"];\n        } else {\n            $this->results[] = [\"✗\", \"Validation messages\", \"Missing\"];\n        }\n        \n        echo \"\\n\";\n    }\n    \n    private function testDifferentAmounts()\n    {\n        echo \"4. Testing different order amounts...\\n\";\n        \n        $amounts = [\n            ['amount' => 0, 'expected' => false],\n            ['amount' => 999, 'expected' => false],\n            ['amount' => 999.99, 'expected' => false],\n            ['amount' => 1000, 'expected' => true],\n            ['amount' => 1000.01, 'expected' => true],\n            ['amount' => 2500, 'expected' => true],\n        ];\n        \n        foreach ($amounts as $test) {\n            $result = DeliveryService::validateMinimumOrderAmount($test['amount']);\n            $actual = $result['valid'];\n            \n            if ($actual === $test['expected']) {\n                $this->results[] = [\"✓\", \"₹{$test['amount']}\", \"Correct validation\"];\n            } else {\n                $expected = $test['expected'] ? 'Valid' : 'Invalid';\n                $got = $actual ? 'Valid' : 'Invalid';\n                $this->results[] = [\"✗\", \"₹{$test['amount']}\", \"Expected: {$expected}, Got: {$got}\"];\n            }\n        }\n        \n        echo \"\\n\";\n    }\n    \n    private function testAdminControls()\n    {\n        echo \"5. Testing admin controls...\\n\";\n        \n        // Save current settings\n        $originalEnabled = AppSetting::get('min_order_validation_enabled');\n        $originalAmount = AppSetting::get('min_order_amount');\n        \n        try {\n            // Test disabling validation\n            AppSetting::set('min_order_validation_enabled', false, 'boolean', 'delivery');\n            $result = DeliveryService::validateMinimumOrderAmount(500);\n            \n            if ($result['valid']) {\n                $this->results[] = [\"✓\", \"Disable validation\", \"Working\"];\n            } else {\n                $this->results[] = [\"✗\", \"Disable validation\", \"Failed\"];\n            }\n            \n            // Test changing minimum amount\n            AppSetting::set('min_order_validation_enabled', true, 'boolean', 'delivery');\n            AppSetting::set('min_order_amount', 2000.00, 'float', 'delivery');\n            \n            $result = DeliveryService::validateMinimumOrderAmount(1500);\n            if (!$result['valid']) {\n                $this->results[] = [\"✓\", \"Change min amount\", \"Working\"];\n            } else {\n                $this->results[] = [\"✗\", \"Change min amount\", \"Failed\"];\n            }\n            \n        } catch (Exception $e) {\n            $this->results[] = [\"✗\", \"Admin controls\", $e->getMessage()];\n        } finally {\n            // Restore original settings\n            AppSetting::set('min_order_validation_enabled', $originalEnabled, 'boolean', 'delivery');\n            AppSetting::set('min_order_amount', $originalAmount, 'float', 'delivery');\n        }\n        \n        echo \"\\n\";\n    }\n    \n    private function printResults()\n    {\n        echo str_repeat('=', 60) . \"\\n\";\n        echo \"TEST RESULTS\\n\";\n        echo str_repeat('=', 60) . \"\\n\\n\";\n        \n        $passed = 0;\n        $failed = 0;\n        \n        foreach ($this->results as $result) {\n            $status = $result[0];\n            $test = str_pad($result[1], 30);\n            $message = $result[2];\n            \n            echo \"{$status} {$test} : {$message}\\n\";\n            \n            if ($status === '✓') {\n                $passed++;\n            } else {\n                $failed++;\n            }\n        }\n        \n        echo \"\\n\" . str_repeat('-', 60) . \"\\n\";\n        echo \"SUMMARY: {$passed} passed, {$failed} failed\\n\";\n        \n        if ($failed === 0) {\n            echo \"\\n🎉 ALL TESTS PASSED! Minimum order validation is working correctly.\\n\";\n        } else {\n            echo \"\\n⚠️  Some tests failed. Please check the configuration.\\n\";\n        }\n        \n        echo str_repeat('=', 60) . \"\\n\";\n    }\n}\n\n// Run tests if this file is executed directly\nif (basename(__FILE__) === basename($_SERVER['SCRIPT_FILENAME'])) {\n    $tester = new MinOrderValidationTest();\n    $tester->runAllTests();\n}\n"